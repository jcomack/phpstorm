<application>
  <component name="LanguageInjectionConfiguration">
    <injection language="CSS" injector-id="php">
      <display-name>&lt;&lt;&lt; CSS</display-name>
      <single-file value="true" />
      <place disabled="true"><![CDATA[phpLiteralExpression("CSS")]]></place>
    </injection>
    <injection language="HTML" injector-id="php">
      <display-name>&lt;&lt;&lt; HTML</display-name>
      <single-file value="true" />
      <place disabled="true"><![CDATA[phpLiteralExpression("HTML")]]></place>
    </injection>
    <injection language="JavaScript" injector-id="php">
      <display-name>&lt;&lt;&lt; JS</display-name>
      <single-file value="true" />
      <place disabled="true"><![CDATA[phpLiteralExpression("JS")]]></place>
    </injection>
    <injection language="RegExp" injector-id="php">
      <display-name>&lt;&lt;&lt; REGEXP</display-name>
      <single-file value="true" />
      <place disabled="true"><![CDATA[phpLiteralExpression("REGEXP")]]></place>
    </injection>
    <injection language="SQL" injector-id="php">
      <display-name>&lt;&lt;&lt; SQL</display-name>
      <single-file value="true" />
      <place disabled="true"><![CDATA[phpLiteralExpression("SQL")]]></place>
    </injection>
    <injection language="XML" injector-id="php">
      <display-name>&lt;&lt;&lt; XML</display-name>
      <single-file value="true" />
      <place disabled="true"><![CDATA[phpLiteralExpression("XML")]]></place>
    </injection>
    <injection language="XML" injector-id="sql">
      <display-name>Derby XML</display-name>
      <single-file value="true" />
      <place disabled="true"><![CDATA[sqlElement().forDialects("Derby").functionArgument(0, sqlFunctionCall().name("xmlparse").params(sqlExpressions().count(1)))]]></place>
    </injection>
    <injection language="XPath2" injector-id="sql">
      <display-name>Derby XPath</display-name>
      <single-file value="true" />
      <place disabled="true"><![CDATA[sqlElement().forDialects("Derby").functionArgument(0, sqlFunctionCall().name("xmlexists", "xmlquery").params(sqlExpressions().count(2)))]]></place>
    </injection>
    <injection language="RegExp" injector-id="sql">
      <display-name>EXASOL RegExp</display-name>
      <single-file value="true" />
      <place disabled="true"><![CDATA[sqlElement().forDialects("Exasol").binaryExpressionArgument(1, sqlBinaryExpression().operation(leafTokens("regexp_like").or("not", "regexp_like")))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Exasol").functionArgument(1, sqlFunctionCall().name("regexp_instr", "regexp_substr").params(sqlExpressions().count(2, 4)))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Exasol").functionArgument(1, sqlFunctionCall().name("regexp_replace").params(sqlExpressions().count(2, 5)))]]></place>
    </injection>
    <injection language="RegExp" injector-id="sql">
      <display-name>H2 RegExp</display-name>
      <single-file value="true" />
      <place disabled="true"><![CDATA[sqlElement().forDialects("H2").binaryExpressionArgument(1, sqlBinaryExpression().operation(leafTokens("regexp").or("not", "regexp")))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("H2").functionArgument(1, sqlFunctionCall().name("regexp_like").params(sqlExpressions().count(2, 3)))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("H2").functionArgument(1, sqlFunctionCall().name("regexp_replace").params(sqlExpressions().count(3, 4)))]]></place>
    </injection>
    <injection language="RegExp" injector-id="sql">
      <display-name>Oracle RegExp</display-name>
      <single-file value="true" />
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("regexp_count").params(sqlExpressions().count(2, 4)))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("regexp_instr").params(sqlExpressions().count(2, 7)))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("regexp_like").params(sqlExpressions().count(2, 3)))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("regexp_replace", "regexp_substr").params(sqlExpressions().count(2, 6)))]]></place>
    </injection>
    <injection language="XML" injector-id="sql">
      <display-name>Oracle XML</display-name>
      <single-file value="true" />
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(0, sqlFunctionCall().name("xmlparse", "xmltype").params(sqlExpressions().count(1)))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(0, sqlFunctionCall().name("xmlserialize"))]]></place>
    </injection>
    <injection language="XPath2" injector-id="sql">
      <display-name>Oracle XPath</display-name>
      <single-file value="true" />
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(0, sqlFunctionCall().name("xmlquery", "xmlexists"))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(0, sqlFunctionCall().name("xmltable"))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, -2, 2, sqlFunctionCall().name("updatexml"))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("appendchildxml", "insertxmlafter", "insertxmlbefore").params(sqlExpressions().count(3, 4)))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("extract", "extractvalue", "deletexml", "existsnode").params(sqlExpressions().count(2, 3)))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("insertchildxml", "insertchildxmlafter", "insertchildxmlbefore").params(sqlExpressions().count(4, 5)))]]></place>
    </injection>
    <injection language="JavaScript" injector-id="xml">
      <display-name>*/@href</display-name>
      <value-pattern>^javascript:(.+)</value-pattern>
      <single-file value="true" />
      <place disabled="true"><![CDATA[xmlAttribute().withLocalName(string().equalTo("href")).withParent(xmlTag().withNamespace(string().equalTo("http://www.w3.org/1999/xhtml")))]]></place>
    </injection>
    <injection language="JavaScript" injector-id="xml">
      <display-name>*/@on.*</display-name>
      <single-file value="true" />
      <place disabled="true"><![CDATA[xmlAttribute().withLocalName(string().startsWith("on")).withParent(xmlTag().withNamespace(string().equalTo("http://www.w3.org/1999/xhtml")))]]></place>
    </injection>
    <injection language="CSS" injector-id="xml">
      <display-name>*/@style</display-name>
      <prefix>dummy_selector {</prefix>
      <suffix>}</suffix>
      <single-file value="true" />
      <place disabled="true"><![CDATA[xmlAttribute().withLocalName(string().equalTo("style")).inside(xmlTag().withNamespace(string().equalTo("http://www.w3.org/1999/xhtml")))]]></place>
    </injection>
    <injection language="JSX Harmony" injector-id="xml">
      <display-name>FormattedMessage/@id</display-name>
      <single-file value="true" />
      <place><![CDATA[xmlAttribute().withLocalName(string().equalTo("id")).withParent(xmlTag().withLocalName(string().equalTo("FormattedMessage")))]]></place>
    </injection>
    <injection language="JavaScript" injector-id="xml">
      <display-name>script</display-name>
      <single-file value="true" />
      <place disabled="true"><![CDATA[xmlTag().withLocalName(string().equalTo("script")).withNamespace(string().equalTo("http://www.w3.org/1999/xhtml"))]]></place>
    </injection>
    <injection language="CSS" injector-id="xml">
      <display-name>style</display-name>
      <single-file value="true" />
      <place disabled="true"><![CDATA[xmlTag().withLocalName(string().equalTo("style")).withNamespace(string().equalTo("http://www.w3.org/1999/xhtml"))]]></place>
      <xpath-condition>lower-case(@type)='text/css'</xpath-condition>
    </injection>
  </component>
</application>